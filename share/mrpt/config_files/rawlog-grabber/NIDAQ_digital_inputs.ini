# -------------------------------------------------------------------
#  Config file for the "rawlog-grabber" application
# Read more online: 
# http://www.mrpt.org/list-of-mrpt-apps/application-rawlog-grabber/
# -------------------------------------------------------------------

#  Each section [XXXXX] (but [global]) setups a thread in the RawLogGrabber 
#   standalone application. Each thread collects data from some
#   sensor or device, then the main thread groups and orders them before
#   streaming everything to a rawlog file.
#
#  The name of the sections will become the sensor label. The driver for
#   each sensor is actually determined by the field "driver", which must
#   match the name of some class in HWDRIVERS implementing CGenericSensor.


# =======================================================
#  Section: Global settings to the application
#  =======================================================
[global]
# The prefix can contain a relative or absolute path.
# The final name will be <PREFIX>_date_time.rawlog
rawlog_prefix		= ./datalog_daq

# Milliseconds between thread launches
time_between_launches	= 1000

use_sensoryframes	= 0
GRABBER_PERIOD_MS	= 1000


# =======================================================
#  NIDAQ Board
# =======================================================
[NIDAQ_BOARD]
driver			= CNationalInstrumentsDAQ
process_rate	= 1000	// Hz

# Number of tasks (each will run in a thread). Task indices are 0-based.
# (Parameters below follow NI's DAQmx API notation)
num_tasks  = 1 

# Channels, separated by commas if more than one.
#  - "ai": Analog inputs
#  - "ao": Analog outputs
#  - "di": Digital inputs
#  - "do": Digital inputs
#  - "ci_period", 
#    "ci_count_edges", "ci_pulse_width",
#    "ci_lin_encoder", "ci_ang_encoder" : Counters & encoders (WARNING: NI says "a task can include only one counter input channel")
#  - "co_pulses": Output digital pulses (WARNING: NI says "a task can include only one counter output channel")
#

# TASK 0
task0.channels = di
task0.samplesPerSecond = 1000         // Samples per second. Continuous (infinite) sampling is assumed.
task0.samplesPerChannelToRead = 1000  // The number of samples to grab at once from each channel.
#task0.bufferSamplesPerChannel = 200000 // Increase if you have errors about " Onboard device memory overflow.(...)"

#Source of the sample clock (only if needed)
# task0.sampleClkSource = /Dev1/OnboardClock

# Analog input channel params. 
task0.di.lines           = Dev1/port1
task0.di.linesCount      = 8  // *IMPORTANT* This must be the total number of lines

